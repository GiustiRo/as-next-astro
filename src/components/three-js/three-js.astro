---
---

<canvas id="canvas"></canvas>

<script>
  import * as THREE from "three";
  import { DirectionalLight, Vector3 } from "three";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
  import { DRACOLoader } from "three/examples/jsm/loaders/DracoLoader";
  import { RenderPass } from "three/examples/jsm/postprocessing/RenderPass";
  import { EffectComposer } from "three/examples/jsm/postprocessing/EffectComposer";
  import { UnrealBloomPass } from "three/examples/jsm/postprocessing/UnrealBloomPass";

  // Client properties
  let canvasSize = { width: window.innerWidth, height: window.innerHeight };
  const canvas = document.getElementById("canvas") as HTMLCanvasElement;

  // Three properties
  let renderer!: THREE.WebGLRenderer;
  let scene!: THREE.Scene;
  let camera!: any;//THREE.PerspectiveCamera;
  let mainLight!: DirectionalLight;

  let renderScene!: RenderPass;
  let composer!: EffectComposer;

  let bloomPass!: UnrealBloomPass;

  // PARTICLES
  let particlesCount = 200;
  let positions = new Float32Array(particlesCount * 3);
  let particlesGeometry = new THREE.BufferGeometry();
  let particlesMaterial = new THREE.PointsMaterial({
    color: "#ffeded",
    sizeAttenuation: true,
    size: 0.1,
  });
  let particles = new THREE.Points(particlesGeometry, particlesMaterial);

  // Switch Scroll Mode
  let ytSectionTrigger = false;

  // FIRST OF ALL: CREATE A SCENE
  let createScene = () => {
    // Scene
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0, 0, 0);
    // Init and Add the Camera
    let aspectRatio = canvasSize.width / canvasSize.height;
    camera = new THREE.PerspectiveCamera(35, aspectRatio, 1, 1000);
    scene.add(camera);
    camera = new THREE.PerspectiveCamera(35, aspectRatio, 1, 1000);
    camera["position"].z = 35;
    camera["rotation"].y = 0.3;

    // const axesHelper = new THREE.AxesHelper(5);scene.add(axesHelper);// DEBUG
  };

  // LIGHT
  let createLight = () => {
    mainLight = new DirectionalLight(0xb48be9, 0);
    mainLight["position"].set(0, 40, -80);
    scene.add(mainLight);
    let draw = () => {
      setTimeout(() => {
        let rqa_light = requestAnimationFrame(draw);
        if (mainLight.intensity >= 1) {
          window.cancelAnimationFrame(rqa_light);
        }
        mainLight.intensity += 0.01;
      }, 1000 / 40 /* FPS */);
    };
    draw();
  };

  // RENDER CONTENT AND START ANIMATION LOOP
  let startRenderingLoop = () => {
    // Use canvas element in client template
    renderer = new THREE.WebGLRenderer({
      canvas: canvas,
      antialias: true,
      alpha: true,
    });
    renderer.setPixelRatio(devicePixelRatio);
    renderer.setSize(canvasSize.width, canvasSize.height);

    // Setup "Bloom" Effect
    renderScene = new RenderPass(scene, camera);
    composer = new EffectComposer(renderer);
    composer.addPass(renderScene);
    bloomPass = new UnrealBloomPass(
      new THREE.Vector2(canvasSize.width, canvasSize.height),
      0.5,
      1,
      0.3
    );
    composer.addPass(bloomPass);

    // Trigger Loop Animation
    (function render() {
      requestAnimationFrame(render);
      composer.render();
    })();
  };

  // let fakeLoad = () => {};


  let loadGTLF = () => {
    const loader = new GLTFLoader();
    const dLoader = new DRACOLoader();
    dLoader.setDecoderPath("/draco/");
    dLoader.preload();
    dLoader.setDecoderConfig({ type: "js" });
    loader.setDRACOLoader(dLoader);

    const loadModel = (gltf, position?: Vector3) => {
      const model = gltf.scene.getObjectByName("Laptop");
      if (gltf.scene.children && gltf.scene.children.length) {
        // LAPTOP & SCREEN CONFIG.
        if (model.name == "Laptop") {
          let bottomRotation = 1.86;
          let screen = gltf.scene.getObjectByName("Screen");
          let display = gltf.scene.getObjectByName("Display_Body");
          let blackFrame = gltf.scene.getObjectByName("Black_Frame");
          screen?.rotation.set(bottomRotation, 0, 0);
          display?.rotation.set(bottomRotation, 0, 0);
          blackFrame?.rotation.set(bottomRotation, 0, 0);
          model.position.copy(new Vector3(0, 0, 0));
          model.scale.set(0.02, 0.02, 0.02);
          scene.add(model);
          // SETS SCROLL ANIMATION
          setScrollAnimation({ screen, display, blackFrame }, bottomRotation);
        }
        let rockBottom = gltf.scene.getObjectByName("Rock_bottom");
        rockBottom.rotation.set(0, 10, 50);
        rockBottom.position.copy(new Vector3(0, -3.5, 4));
        rockBottom.scale.set(0.2, 0.2, 0.2);
        scene.add(rockBottom);

        let rock_2 = rockBottom.clone();
        rock_2.rotation.set(0, 1, 0.5);
        rock_2.position.copy(new Vector3(2, -5, -7));
        rock_2.scale.set(0.5, 0.5, 0.5);
        scene.add(rock_2);
      }
    };
    loader.load(
      // "/3D/gltf/Alabama_s.gltf",
      "/3D/gltf_out/Alabama_s2.glb",
      (gltf) => loadModel(gltf),
      (xhr) => {
        if (
          (xhr.loaded / xhr.total) * 100 >=
          100
          // ||
          // count >= 100
        ) {
          (
            document.querySelector("#three-loader-overlay") as HTMLElement
          ).style.transform = "translateY(-100%)";
          // clearInterval(loadingFake);
          // count = 100;
          // Release Draco Memory
          dLoader.dispose();
          // Add Ligth to scene and render particles.
          createLight();
          setParticles();
        }
      }, // ADD LOADER!!!
      (err) => console.log(err)
    );
  };

  let setScrollAnimation = (
    { screen, display, blackFrame }: any,
    bottomRotation: number
  ) => {
    let recalculate = () => {
      // console.warn("recalculating", ytSectionTrigger, window.scrollY);
      if (!ytSectionTrigger) {
        let multy = 200;
        if (screen && screen.rotation.x >= 0 && window.scrollY / multy <= 1.8) {
          screen?.rotation.set(bottomRotation - window.scrollY / multy, 0, 0);
          display?.rotation.set(bottomRotation - window.scrollY / multy, 0, 0);
          blackFrame?.rotation.set(
            bottomRotation - window.scrollY / multy,
            0,
            0
          );
          scene["rotation"].y = -(window.scrollY / multy / 5);
        } else {
          // Max thresold or top value
          screen?.rotation.set(0, 0, 0);
          display?.rotation.set(0, 0, 0);
          blackFrame?.rotation.set(0, 0, 0);
        }

        if (window.scrollY / multy > 1.8) {
          // Top values (won't exceed)
          camera["position"].y =
            -(window.scrollY / multy - 1.8) * (window.innerHeight / multy);
          scene["rotation"].y = -0.356;
        } else {
          camera["position"].y = 0;
        }
      } else {
        // Footer Section
        // first set all to defaults
        // console.warn(window.innerHeight);
        let amountSections = document.querySelectorAll("sections").length;
        let switchThres = window.innerHeight * amountSections - 500;
      }
      composer.render();
    };
    window.addEventListener("scroll", (e) => recalculate()); // CLOSED => TO => OPEN
    setTimeout(() => recalculate()); // Run after first load.
    // console.clear();
  };

  let setParticles = () => scene.add(particles);

  function deferInit() {
    createScene();
    startRenderingLoop();
    loadGTLF();
  }

  // #################### INIT CALL AFTER DEFINITIONS...
  function init() {
    for (let i = 0; i < particlesCount; i++) {
      positions[i * 3 + 0] = (Math.random() - 0.5) * 1000;
      positions[i * 3 + 1] = Math.random() * 10;
      positions[i * 3 + 2] = (Math.random() - 0.5) * 100;
    }
    setTimeout(() =>
      particlesGeometry.setAttribute(
        "position",
        new THREE.BufferAttribute(positions, 3)
      )
    ); // Run after for loop ends.
    setTimeout(deferInit);
  }

  init();

  // Set Scene behind
  import { setNewIntersection } from "../../utils/intersection";

  setNewIntersection(
    "#footer-thee-trigger",
    (entry) => {
      // setSceneBehind();
    },
    "0px 0px 1000px 0px"
  );

  let setSceneBehind = () => {
    ytSectionTrigger = true;
  };
</script>
<style>
  :host {
    display: flex;
  }
  #canvas {
    border-radius: 0px;
  }
</style>
